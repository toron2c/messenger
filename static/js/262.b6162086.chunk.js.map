{"version":3,"file":"static/js/262.b6162086.chunk.js","mappings":"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","sources":["webpack://messenger2000/./src/components/Chats/ChatsMobile/ChatsMobileMessages/ChatsMobileMessages.module.scss?b239","components/Chats/ChatsMobile/ChatsMobileMessages/ChatsMobileMessages.jsx","webpack://messenger2000/./src/components/Chats/Messages/Messages.module.scss?6a7c","webpack://messenger2000/./src/components/Chats/Messages/MessagesInputNewMessage/MessageInputNewMessage.module.scss?76a7","components/Chats/Messages/MessagesInputNewMessage/MessagesInputNewMessage.jsx","webpack://messenger2000/./src/components/Chats/Messages/MessageList/MessageListItem/message.module.scss?b7f4","components/Chats/Messages/MessageList/MessageListItem/Message.jsx","components/Chats/Messages/MessageList/MessageList.jsx","redux/reducers/messagesReducer/selectorMessages.js","components/Chats/Messages/Messages.jsx","redux/reducers/chatsReducer/selectorChats.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"boxMessageMobile\":\"ChatsMobileMessages_boxMessageMobile__6LuYL\"};","import Messages from \"../../Messages/Messages\";\r\nimport style from './ChatsMobileMessages.module.scss'\r\n\r\nexport default function ChatsMobileMessages() {\r\n\r\n    return (\r\n        <div className={style.boxMessageMobile}>\r\n            <Messages />\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"warning\":\"Messages_warning__IPlWp\",\"box\":\"Messages_box__yA9Oi\",\"messagesTitle\":\"Messages_messagesTitle__9Ixka\",\"messages\":\"Messages_messages__NOyjG\",\"messagesTitleName\":\"Messages_messagesTitleName__vJm3a\",\"user\":\"Messages_user__xjqnt\",\"bot\":\"Messages_bot__rKVlM\",\"date\":\"Messages_date__9Yi9-\",\"box__back\":\"Messages_box__back__AnfSn\",\"avatar\":\"Messages_avatar__ZK9L8\"};","// extracted by mini-css-extract-plugin\nexport default {\"box\":\"MessageInputNewMessage_box__5elFE\",\"inputMessageArea\":\"MessageInputNewMessage_inputMessageArea__Bh0Xu\",\"buttonEnter\":\"MessageInputNewMessage_buttonEnter__ePF2N\"};","import { useDispatch, useSelector } from \"react-redux\";\r\nimport style from './MessageInputNewMessage.module.scss'\r\n\r\nimport { inputChat, sendMessageWithSaga } from \"../../../../redux/actions\";\r\n\r\nexport default function MessagesInputNewMessage( { uid } ) {\r\n\r\n    const dispatch = useDispatch();\r\n    const textMessage = useSelector( state => state.messages.textNewMessage );\r\n\r\n    const onChangeInput = ( e ) => {\r\n        e.preventDefault();\r\n        dispatch( inputChat( e.target.value ) );\r\n    }\r\n    const onSendMessage = ( e ) => {\r\n        e.preventDefault();\r\n        if ( textMessage !== '' ) {\r\n            dispatch( sendMessageWithSaga( uid ) );\r\n            document.getElementById( 'inputRef' ).focus();\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={style.box}>\r\n            <textarea\r\n                className={style.inputMessageArea}\r\n                autoFocus\r\n                id={'inputRef'}\r\n                value={textMessage}\r\n                onChange={onChangeInput}\r\n                placeholder='text message'\r\n            />\r\n            <button className={style.buttonEnter} onClick={onSendMessage}>\r\n                Отправить\r\n            </button>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"text\":\"message_text__QgITz\",\"time\":\"message_time__HMD2P\",\"user\":\"message_user__XBjqZ\",\"bot\":\"message_bot__OGAak\"};","import { forwardRef, useEffect } from 'react'\r\nimport style from './message.module.scss'\r\n\r\n\r\n\r\nconst Message = forwardRef( ( props, ref ) => {\r\n    const { el } = props;\r\n    let time = new Date( el.TimestampServer ? el.TimestampServer : new Date() );\r\n    const windowInnerWidth = window.innerWidth;\r\n    useEffect( () => {\r\n        if ( windowInnerWidth <= 600 ) {\r\n            ref.current.scrollIntoView( true );\r\n        } else {\r\n            ref.current.scrollIntoView( { behavior: \"smooth\" } );\r\n        }\r\n    }, [ref, windowInnerWidth] )\r\n    return (\r\n        <div className={el.author === 'you' ? style.user : style.bot}>\r\n            <div className={style.text}>\r\n                {el.message}\r\n                <div className={style.time}>{time.getHours()} : {( time.getMinutes() < 10 ? '0' : '' ) + time.getMinutes()}</div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n} )\r\n\r\nexport default Message;","import { useDispatch, useSelector } from \"react-redux\"\r\nimport Message from \"./MessageListItem/Message\"\r\nimport styles from '../Messages.module.scss'\r\nimport React, { useEffect, useRef } from \"react\"\r\nimport { getMessageList } from \"../../../../redux/reducers/messagesReducer/selectorMessages\"\r\nimport { subscribeOnNewMessages, unsubscribeOnNewMessages } from \"../../../../redux/actions\"\r\n\r\n/**\r\n * create new component with old messages, which not dependencies  with new and current messages, which have state old messages\r\n * \r\n */\r\n\r\n\r\nexport default function MessageList( { uid } ) {\r\n    const messages = useSelector( getMessageList( uid ) );\r\n    const dispatch = useDispatch();\r\n    const refOnLastElement = useRef();\r\n    let startDate;\r\n    useEffect( () => {\r\n        dispatch( subscribeOnNewMessages( uid ) );\r\n        return () => {\r\n            dispatch( unsubscribeOnNewMessages( uid ) )\r\n        }\r\n    }, [uid, dispatch] )\r\n    const list = messages.map( ( el ) => {\r\n        let time = new Date( el.TimestampServer ? el.TimestampServer : new Date() );\r\n        if ( ( startDate === undefined ) || ( startDate.getDate() !== time.getDate() ) ) {\r\n            startDate = time;\r\n            let tmpDate = startDate.toLocaleString( 'default', { month: 'long' } )\r\n            return <React.Fragment key={el.idMessage}><div key={`${el.idMessage}_date`} className={styles.date}>{tmpDate} {startDate.getDate()}</div><MessageMemo ref={refOnLastElement} el={el} key={`${el.idMessage}_m`} /></React.Fragment>\r\n        }\r\n        return <MessageMemo key={`${el.idMessage}_message`} ref={refOnLastElement} el={el} />\r\n    } )\r\n    return (\r\n        <>\r\n            {list && list}\r\n            <div ref={refOnLastElement} />\r\n        </>\r\n    )\r\n}\r\n\r\nconst MessageMemo = React.memo( Message );","export function getMessageList( chatId ) {\r\n    return ( state ) => state.messages.messageList[chatId].messages\r\n}\r\n\r\n","import styles from './Messages.module.scss'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport MessagesInputNewMessage from './MessagesInputNewMessage/MessagesInputNewMessage';\r\nimport MessageList from './MessageList/MessageList';\r\nimport { useEffect, useMemo, useRef } from 'react';\r\nimport { checkCorrectId } from '../../../redux/reducers/chatsReducer/selectorChats';\r\nimport { getOldMessagesWithSaga, updateLastMessagesWithSaga } from '../../../redux/actions';\r\n\r\nexport default function Messages() {\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const checkId = useMemo( () => checkCorrectId( id ), [id] );\r\n    const isCorrectId = useSelector( checkId );\r\n    const boxMessage = useRef();\r\n    const windowInnerWidth = window.innerWidth;\r\n    useEffect( () => {\r\n        if ( isCorrectId ) {\r\n            dispatch( updateLastMessagesWithSaga( isCorrectId.chatId ) )\r\n        }\r\n    }, [isCorrectId, dispatch] )\r\n\r\n    const onScrollFunction = () => {\r\n        const scroll = Math.abs( boxMessage.current.getBoundingClientRect().top - boxMessage.current.offsetTop )\r\n        if ( scroll < 1 ) {\r\n            dispatch( getOldMessagesWithSaga( isCorrectId.chatId ) )\r\n        }\r\n    }\r\n    return ( <>\r\n        {isCorrectId ? <> \r\n            <div className={styles.box}>\r\n                <div className={styles.messagesTitle}>\r\n                    <div className={styles.messagesTitleName}>{isCorrectId.nameDialog}{isCorrectId.avatar && <img className={styles.avatar} src={isCorrectId.avatar} width='24' heigth='24' alt={'profile avatar'} />}</div>\r\n                    {windowInnerWidth < 1024 && <div><Link class={styles.box__back} to='/chats'>←</Link></div>}\r\n                </div>\r\n                <div onScroll={onScrollFunction} className={styles.messages}>\r\n                    <div ref={boxMessage} />\r\n                    <MessageList uid={isCorrectId.chatId} />\r\n                </div>\r\n                <div className={styles.input}>\r\n                    <MessagesInputNewMessage uid={isCorrectId.chatId} />\r\n                </div>\r\n            </div>\r\n\t\t\t\t\t\t</>\r\n            : <p className={styles.warning}>Откройте чат</p>\r\n        }\r\n    </>\r\n    )\r\n}\r\n","export function getChatsList() {\r\n    return ( state ) => state.chats.chatList;\r\n}\r\n\r\nexport function checkCorrectId( id ) {\r\n    return ( state ) => state.chats.chatList.find( el => el.linkToDialog === Number( id ) );\r\n}\r\nexport function getStatusFieldInput() {\r\n    return ( state ) => state.chats.toggleNewChat;\r\n}\r\n\r\nexport function getStatusErrorChats() {\r\n    return ( state ) => state.chats.error.isError;\r\n}\r\nexport function getErrorMessageChats() {\r\n    return ( state ) => state.chats.error.msg;\r\n}"],"names":["ChatsMobileMessages","className","style","Messages","MessagesInputNewMessage","uid","dispatch","useDispatch","textMessage","useSelector","state","messages","textNewMessage","autoFocus","id","value","onChange","e","preventDefault","inputChat","target","placeholder","onClick","sendMessageWithSaga","document","getElementById","focus","forwardRef","props","ref","el","time","Date","TimestampServer","windowInnerWidth","window","innerWidth","useEffect","current","scrollIntoView","behavior","author","message","getHours","getMinutes","MessageList","chatId","startDate","messageList","refOnLastElement","useRef","subscribeOnNewMessages","unsubscribeOnNewMessages","list","map","undefined","getDate","tmpDate","toLocaleString","month","styles","idMessage","MessageMemo","React","Message","useParams","checkId","useMemo","checkCorrectId","isCorrectId","boxMessage","updateLastMessagesWithSaga","nameDialog","avatar","src","width","heigth","alt","class","to","onScroll","Math","abs","getBoundingClientRect","top","offsetTop","getOldMessagesWithSaga","getChatsList","chats","chatList","find","linkToDialog","Number","getStatusFieldInput","toggleNewChat","getStatusErrorChats","error","isError","getErrorMessageChats","msg"],"sourceRoot":""}