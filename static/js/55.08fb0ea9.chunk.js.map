{"version":3,"file":"static/js/55.08fb0ea9.chunk.js","mappings":"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","sources":["webpack://messenger2000/./src/components/Chats/ChatsMobile/ChatsMobile.module.scss?2071","components/Chats/ChatsMobile/ChatsMobile.jsx","webpack://messenger2000/./src/components/Chats/Dialogs/DialogItem/DialogItem.module.scss?9efb","components/Chats/Dialogs/DialogItem/DialogItem.jsx","components/Chats/Dialogs/Dialogs.jsx","webpack://messenger2000/./src/components/Chats/InputNewChat/InputNewChat.module.scss?17ef","components/Chats/InputNewChat/InputNewChat.jsx","components/Chats/InputNewChat/DialogsNewChat.jsx","redux/reducers/chatsReducer/selectorChats.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"containerDialogs\":\"ChatsMobile_containerDialogs__vLooO\",\"containerDialogs__newChat\":\"ChatsMobile_containerDialogs__newChat__fQPy3\"};","import Dialogs from \"../Dialogs/Dialogs\";\r\nimport DialogsNewChat from \"../InputNewChat/DialogsNewChat\";\r\nimport style from './ChatsMobile.module.scss'\r\n\r\n\r\nexport default function ChatsMobile() {\r\n\r\n    return (\r\n        <div className={style.containerDialogs}>\r\n            <div className={style.dialogs}>\r\n                <Dialogs />\r\n            </div>\r\n            <div className={style.containerDialogs__newChat}>\r\n                <DialogsNewChat />\r\n            </div>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"unActiveDialog\":\"DialogItem_unActiveDialog__lYKd+\",\"activeDialog\":\"DialogItem_activeDialog__9ZLSp\",\"avatar\":\"DialogItem_avatar__0jXYi\",\"boxList\":\"DialogItem_boxList__lSFeu\",\"item\":\"DialogItem_item__iLypo\"};","import React from \"react\";\r\n// import { useState } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport styles from './DialogItem.module.scss'\r\n// import DialogItemButtonRemove from \"./DialogItemButtonRemove/DialogItemButtonRemove\";\r\n\r\n/*\r\n\r\nAdded remove dialog\r\n*/\r\n\r\nexport default function DialogItem( { id, name, avatar } ) {\r\n    // let [visibleButton, setVisibleButton] = useState( false );\r\n    return ( <li className={styles.item}>\r\n\r\n        {/* // onMouseEnter={() => setVisibleButton( true )} */}\r\n        {/* // onMouseLeave={() => setVisibleButton( false )} */}\r\n        <NavLink className={( { isActive } ) => isActive ? styles.activeDialog : styles.unActiveDialog} to={`${id}`}>\r\n            {avatar && <div><img className={styles.avatar} src={avatar} width='24' heigth='24' alt={'profile avatar'} /></div>}\r\n            <p>{name}</p>\r\n        </NavLink>\r\n        {/* {visibleButton && <DialogItemButtonRemove id={id} />} */}\r\n    </li> )\r\n}\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { closedSubscribeOnNewChats, setSubscribeOnNewChats } from \"../../../redux/actions\";\r\nimport { getChatsList } from \"../../../redux/reducers/chatsReducer/selectorChats\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport style from './DialogItem/DialogItem.module.scss'\r\n\r\nexport default function Dialogs() {\r\n    const dispatch = useDispatch();\r\n    const statusSubscribeOnNewChats = useSelector( state => state.chats.subscribeActived, ( prev, next ) => prev !== next )\r\n    useEffect( () => {\r\n        dispatch( setSubscribeOnNewChats() );\r\n        return () => {\r\n            dispatch( closedSubscribeOnNewChats() );\r\n        }\r\n    }, [statusSubscribeOnNewChats, dispatch] )\r\n\r\n    const getDialogs = useCallback( () => getChatsList(), [] );\r\n    const dialogs = useSelector( getDialogs() );\r\n\r\n\r\n    let list = dialogs.map( ( el ) => <DialogItemMemo avatar={el.avatar} key={el.chatId} id={el.linkToDialog} name={el.nameDialog} /> )\r\n    return ( <div className={style.boxList}>\r\n        <ul className={style.list}>{list}</ul>\r\n    </div> )\r\n}\r\n\r\nconst DialogItemMemo = React.memo( DialogItem );","// extracted by mini-css-extract-plugin\nexport default {\"buttonAddChat\":\"InputNewChat_buttonAddChat__WWfFF\",\"buttonAddChat__input\":\"InputNewChat_buttonAddChat__input__lhxy5\",\"boxAddedChat\":\"InputNewChat_boxAddedChat__hegAr\",\"boxAddedChat__input\":\"InputNewChat_boxAddedChat__input__Qhuux\",\"error\":\"InputNewChat_error__DUIv+\"};","import { addNewChat, changeNameNewChat, toggleNewChatInput } from \"../../../redux/actions\";\r\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\r\nimport style from './InputNewChat.module.scss'\r\nimport { getErrorMessageChats, getStatusErrorChats } from \"../../../redux/reducers/chatsReducer/selectorChats\";\r\n\r\nexport default function InputNewChat() {\r\n    const dispatch = useDispatch();\r\n\r\n    const newNameChat = useSelector( state => state.chats.nameNewChat );\r\n    const isError = useSelector( getStatusErrorChats(), shallowEqual );\r\n    const errorMessage = useSelector( getErrorMessageChats(), shallowEqual );\r\n    const onChangeInputNewChat = ( e ) => {\r\n        e.preventDefault();\r\n        dispatch( changeNameNewChat( e.target.value ) );\r\n    }\r\n\r\n    const addNewChatHandler = ( e ) => {\r\n        e.preventDefault();\r\n        if ( newNameChat ) {\r\n            dispatch( addNewChat() );\r\n        } else {\r\n            dispatch( toggleNewChatInput() )\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={style.boxAddedChat}>\r\n            <input type='email' className={style.boxAddedChat__input} placeholder=\"email@email.ru\" required onChange={onChangeInputNewChat} value={newNameChat} label=\"email user\" />\r\n            \r\n\t\t\t\t\t\t{isError && <div className={style.error}>{errorMessage}</div>}   \r\n            <button className={style.buttonAddChat__input} type=\"submit\" onClick={addNewChatHandler}>add</button>\r\n\r\n        </div> )\r\n}","import { useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { toggleNewChatInput } from \"../../../redux/actions\";\r\nimport { getStatusFieldInput } from \"../../../redux/reducers/chatsReducer/selectorChats\";\r\nimport InputNewChat from \"./InputNewChat\";\r\nimport style from './InputNewChat.module.scss'\r\n\r\n\r\nexport default function DialogsNewChat() {\r\n    const dispatch = useDispatch();\r\n    const getStatusInput = useMemo( () => getStatusFieldInput(), [] );\r\n    const inputNewDialog = useSelector( getStatusInput );\r\n\r\n    const setInputVisible = ( e ) => {\r\n        e.preventDefault();\r\n        dispatch( toggleNewChatInput() )\r\n    }\r\n    return (\r\n        !inputNewDialog ? <div className={style.buttonAddChat}><button className={style.buttonAddChat__input} onClick={setInputVisible}>Добавить друга</button> </div> :\r\n            <InputNewChat />\r\n        \r\n       \r\n   )\r\n}","export function getChatsList() {\r\n    return ( state ) => state.chats.chatList;\r\n}\r\n\r\nexport function checkCorrectId( id ) {\r\n    return ( state ) => state.chats.chatList.find( el => el.linkToDialog === Number( id ) );\r\n}\r\nexport function getStatusFieldInput() {\r\n    return ( state ) => state.chats.toggleNewChat;\r\n}\r\n\r\nexport function getStatusErrorChats() {\r\n    return ( state ) => state.chats.error.isError;\r\n}\r\nexport function getErrorMessageChats() {\r\n    return ( state ) => state.chats.error.msg;\r\n}"],"names":["ChatsMobile","className","style","Dialogs","DialogsNewChat","DialogItem","id","name","avatar","styles","isActive","to","src","width","heigth","alt","dispatch","useDispatch","statusSubscribeOnNewChats","useSelector","state","chats","subscribeActived","prev","next","useEffect","setSubscribeOnNewChats","closedSubscribeOnNewChats","getDialogs","useCallback","getChatsList","list","map","el","DialogItemMemo","linkToDialog","nameDialog","chatId","React","InputNewChat","newNameChat","nameNewChat","isError","getStatusErrorChats","shallowEqual","errorMessage","getErrorMessageChats","type","placeholder","required","onChange","e","preventDefault","changeNameNewChat","target","value","label","onClick","addNewChat","toggleNewChatInput","getStatusInput","useMemo","getStatusFieldInput","chatList","checkCorrectId","find","Number","toggleNewChat","error","msg"],"sourceRoot":""}