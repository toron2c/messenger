{"version":3,"file":"static/js/661.1f485871.chunk.js","mappings":"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","sources":["webpack://messenger2000/./src/components/Chats/Chats.module.scss?8012","components/Chats/Chats.jsx","webpack://messenger2000/./src/components/Chats/Dialogs/DialogItem/DialogItem.module.scss?9efb","components/Chats/Dialogs/DialogItem/DialogItem.jsx","components/Chats/Dialogs/Dialogs.jsx","webpack://messenger2000/./src/components/Chats/InputNewChat/InputNewChat.module.scss?17ef","components/Chats/InputNewChat/InputNewChat.jsx","components/Chats/InputNewChat/DialogsNewChat.jsx","webpack://messenger2000/./src/components/Chats/Messages/Messages.module.scss?6a7c","webpack://messenger2000/./src/components/Chats/Messages/MessagesInputNewMessage/MessageInputNewMessage.module.scss?76a7","components/Chats/Messages/MessagesInputNewMessage/MessagesInputNewMessage.jsx","webpack://messenger2000/./src/components/Chats/Messages/MessageList/MessageListItem/message.module.scss?b7f4","components/Chats/Messages/MessageList/MessageListItem/Message.jsx","components/Chats/Messages/MessageList/MessageList.jsx","redux/reducers/messagesReducer/selectorMessages.js","components/Chats/Messages/Messages.jsx","redux/reducers/chatsReducer/selectorChats.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chats\":\"Chats_chats__LV0km\",\"containerDialog\":\"Chats_containerDialog__x6xTn\",\"chats__newDialogInput\":\"Chats_chats__newDialogInput__vgfyb\",\"messages\":\"Chats_messages__FxsIY\"};","import Dialogs from \"./Dialogs/Dialogs\";\r\nimport Messages from \"./Messages/Messages\";\r\nimport style from './Chats.module.scss'\r\nimport DialogsNewChat from \"./InputNewChat/DialogsNewChat\";\r\n\r\n\r\nexport default function Chats() {\r\n    return (\r\n        <div className={style.chats}>\r\n            <div className={style.containerDialog}>\r\n                <div className={style.dialogs}>\r\n                    <Dialogs />\r\n                </div>\r\n                <div className={style.chats__newDialogInput}>\r\n                    <DialogsNewChat />\r\n                </div>\r\n            </div>\r\n            <div className={style.messages}>\r\n                <Messages />\r\n            </div>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"unActiveDialog\":\"DialogItem_unActiveDialog__Ju-BF\",\"activeDialog\":\"DialogItem_activeDialog__tQ0b4\",\"avatar\":\"DialogItem_avatar__RBVv2\",\"boxList\":\"DialogItem_boxList__Ppq3b\",\"item\":\"DialogItem_item__RFrq9\"};","import React from \"react\";\r\n// import { useState } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport styles from './DialogItem.module.scss'\r\n// import DialogItemButtonRemove from \"./DialogItemButtonRemove/DialogItemButtonRemove\";\r\n\r\n/*\r\n\r\nAdded remove dialog\r\n*/\r\n\r\nexport default function DialogItem( { id, name, avatar } ) {\r\n    // let [visibleButton, setVisibleButton] = useState( false );\r\n    return ( <li className={styles.item}>\r\n\r\n        {/* // onMouseEnter={() => setVisibleButton( true )} */}\r\n        {/* // onMouseLeave={() => setVisibleButton( false )} */}\r\n        <NavLink className={( { isActive } ) => isActive ? styles.activeDialog : styles.unActiveDialog} to={`${id}`}>\r\n            {avatar && <div><img className={styles.avatar} src={avatar} width='24' heigth='24' alt={'profile avatar'} /></div>}\r\n            <p>{name}</p>\r\n        </NavLink>\r\n        {/* {visibleButton && <DialogItemButtonRemove id={id} />} */}\r\n    </li> )\r\n}\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { closedSubscribeOnNewChats, setSubscribeOnNewChats } from \"../../../redux/actions\";\r\nimport { getChatsList } from \"../../../redux/reducers/chatsReducer/selectorChats\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport style from './DialogItem/DialogItem.module.scss'\r\n\r\nexport default function Dialogs() {\r\n    const dispatch = useDispatch();\r\n    const statusSubscribeOnNewChats = useSelector( state => state.chats.subscribeActived, ( prev, next ) => prev !== next )\r\n    useEffect( () => {\r\n        dispatch( setSubscribeOnNewChats() );\r\n        return () => {\r\n            dispatch( closedSubscribeOnNewChats() );\r\n        }\r\n    }, [statusSubscribeOnNewChats, dispatch] )\r\n\r\n    const getDialogs = useCallback( () => getChatsList(), [] );\r\n    const dialogs = useSelector( getDialogs() );\r\n\r\n\r\n    let list = dialogs.map( ( el ) => <DialogItemMemo avatar={el.avatar} key={el.chatId} id={el.linkToDialog} name={el.nameDialog} /> )\r\n    return ( <div className={style.boxList}>\r\n        <ul className={style.list}>{list}</ul>\r\n    </div> )\r\n}\r\n\r\nconst DialogItemMemo = React.memo( DialogItem );","// extracted by mini-css-extract-plugin\nexport default {\"buttonAddChat\":\"InputNewChat_buttonAddChat__zL4VS\",\"buttonAddChat__input\":\"InputNewChat_buttonAddChat__input__l6Cg3\",\"boxAddedChat\":\"InputNewChat_boxAddedChat__Vca5h\",\"boxAddedChat__input\":\"InputNewChat_boxAddedChat__input__VT+3g\",\"error\":\"InputNewChat_error__YeAOE\"};","import { addNewChat, changeNameNewChat, toggleNewChatInput } from \"../../../redux/actions\";\r\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\r\nimport style from './InputNewChat.module.scss'\r\nimport { getErrorMessageChats, getStatusErrorChats } from \"../../../redux/reducers/chatsReducer/selectorChats\";\r\n\r\nexport default function InputNewChat() {\r\n    const dispatch = useDispatch();\r\n\r\n    const newNameChat = useSelector( state => state.chats.nameNewChat );\r\n    const isError = useSelector( getStatusErrorChats(), shallowEqual );\r\n    const errorMessage = useSelector( getErrorMessageChats(), shallowEqual );\r\n    const onChangeInputNewChat = ( e ) => {\r\n        e.preventDefault();\r\n        dispatch( changeNameNewChat( e.target.value ) );\r\n    }\r\n\r\n    const addNewChatHandler = ( e ) => {\r\n        e.preventDefault();\r\n        if ( newNameChat ) {\r\n            dispatch( addNewChat() );\r\n        } else {\r\n            dispatch( toggleNewChatInput() )\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={style.boxAddedChat}>\r\n            <input type='email' className={style.boxAddedChat__input} placeholder=\"email@email.ru\" required onChange={onChangeInputNewChat} value={newNameChat} label=\"email user\" />\r\n            \r\n\t\t\t\t\t\t{isError && <div className={style.error}>{errorMessage}</div>}   \r\n            <button className={style.buttonAddChat__input} type=\"submit\" onClick={addNewChatHandler}>add</button>\r\n\r\n        </div> )\r\n}","import { useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { toggleNewChatInput } from \"../../../redux/actions\";\r\nimport { getStatusFieldInput } from \"../../../redux/reducers/chatsReducer/selectorChats\";\r\nimport InputNewChat from \"./InputNewChat\";\r\nimport style from './InputNewChat.module.scss'\r\n\r\n\r\nexport default function DialogsNewChat() {\r\n    const dispatch = useDispatch();\r\n    const getStatusInput = useMemo( () => getStatusFieldInput(), [] );\r\n    const inputNewDialog = useSelector( getStatusInput );\r\n\r\n    const setInputVisible = ( e ) => {\r\n        e.preventDefault();\r\n        dispatch( toggleNewChatInput() )\r\n    }\r\n    return (\r\n        !inputNewDialog ? <div className={style.buttonAddChat}><button className={style.buttonAddChat__input} onClick={setInputVisible}>Добавить друга</button> </div> :\r\n            <InputNewChat />\r\n        \r\n       \r\n   )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"warning\":\"Messages_warning__4JPGe\",\"box\":\"Messages_box__E+k70\",\"messagesTitle\":\"Messages_messagesTitle__5bXmh\",\"messages\":\"Messages_messages__f1rfY\",\"messagesTitleName\":\"Messages_messagesTitleName__mTkd9\",\"user\":\"Messages_user__3YK6t\",\"bot\":\"Messages_bot__KOeto\",\"date\":\"Messages_date__CPU+m\",\"box__back\":\"Messages_box__back__7vufU\",\"avatar\":\"Messages_avatar__d5zb+\"};","// extracted by mini-css-extract-plugin\nexport default {\"box\":\"MessageInputNewMessage_box__DjvQx\",\"inputMessageArea\":\"MessageInputNewMessage_inputMessageArea__L3idV\",\"buttonEnter\":\"MessageInputNewMessage_buttonEnter__nrtTz\"};","import { useDispatch, useSelector } from \"react-redux\";\r\nimport style from './MessageInputNewMessage.module.scss'\r\n\r\nimport { inputChat, sendMessageWithSaga } from \"../../../../redux/actions\";\r\n\r\nexport default function MessagesInputNewMessage( { uid } ) {\r\n\r\n    const dispatch = useDispatch();\r\n    const textMessage = useSelector( state => state.messages.textNewMessage );\r\n\r\n    const onChangeInput = ( e ) => {\r\n        e.preventDefault();\r\n        dispatch( inputChat( e.target.value ) );\r\n    }\r\n    const onSendMessage = ( e ) => {\r\n        e.preventDefault();\r\n        if ( textMessage !== '' ) {\r\n            dispatch( sendMessageWithSaga( uid ) );\r\n            document.getElementById( 'inputRef' ).focus();\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={style.box}>\r\n            <textarea\r\n                className={style.inputMessageArea}\r\n                autoFocus\r\n                id={'inputRef'}\r\n                value={textMessage}\r\n                onChange={onChangeInput}\r\n                placeholder='text message'\r\n            />\r\n            <button className={style.buttonEnter} onClick={onSendMessage}>\r\n                Отправить\r\n            </button>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"text\":\"message_text__Kk+Cy\",\"time\":\"message_time__44iFz\",\"user\":\"message_user__PWgOe\",\"bot\":\"message_bot__PyeOS\"};","import { forwardRef, useEffect } from 'react'\r\nimport style from './message.module.scss'\r\n\r\n\r\n\r\nconst Message = forwardRef( ( props, ref ) => {\r\n    const { el } = props;\r\n    let time = new Date( el.TimestampServer ? el.TimestampServer : new Date() );\r\n    const windowInnerWidth = window.innerWidth;\r\n    useEffect( () => {\r\n        if ( windowInnerWidth <= 600 ) {\r\n            ref.current.scrollIntoView( true );\r\n        } else {\r\n            ref.current.scrollIntoView( { behavior: \"smooth\" } );\r\n        }\r\n    }, [ref, windowInnerWidth] )\r\n    return (\r\n        <div className={el.author === 'you' ? style.user : style.bot}>\r\n            <div className={style.text}>\r\n                {el.message}\r\n                <div className={style.time}>{time.getHours()} : {( time.getMinutes() < 10 ? '0' : '' ) + time.getMinutes()}</div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n} )\r\n\r\nexport default Message;","import { useDispatch, useSelector } from \"react-redux\"\r\nimport Message from \"./MessageListItem/Message\"\r\nimport styles from '../Messages.module.scss'\r\nimport React, { useEffect, useRef } from \"react\"\r\nimport { getMessageList } from \"../../../../redux/reducers/messagesReducer/selectorMessages\"\r\nimport { subscribeOnNewMessages, unsubscribeOnNewMessages } from \"../../../../redux/actions\"\r\n\r\n/**\r\n * create new component with old messages, which not dependencies  with new and current messages, which have state old messages\r\n * \r\n */\r\n\r\n\r\nexport default function MessageList( { uid } ) {\r\n    const messages = useSelector( getMessageList( uid ) );\r\n    const dispatch = useDispatch();\r\n    const refOnLastElement = useRef();\r\n    let startDate;\r\n    useEffect( () => {\r\n        dispatch( subscribeOnNewMessages( uid ) );\r\n        return () => {\r\n            dispatch( unsubscribeOnNewMessages( uid ) )\r\n        }\r\n    }, [uid, dispatch] )\r\n    const list = messages.map( ( el ) => {\r\n        let time = new Date( el.TimestampServer ? el.TimestampServer : new Date() );\r\n        if ( ( startDate === undefined ) || ( startDate.getDate() !== time.getDate() ) ) {\r\n            startDate = time;\r\n            let tmpDate = startDate.toLocaleString( 'default', { month: 'long' } )\r\n            return <React.Fragment key={el.idMessage}><div key={`${el.idMessage}_date`} className={styles.date}>{tmpDate} {startDate.getDate()}</div><MessageMemo ref={refOnLastElement} el={el} key={`${el.idMessage}_m`} /></React.Fragment>\r\n        }\r\n        return <MessageMemo key={`${el.idMessage}_message`} ref={refOnLastElement} el={el} />\r\n    } )\r\n    return (\r\n        <>\r\n            {list && list}\r\n            <div ref={refOnLastElement} />\r\n        </>\r\n    )\r\n}\r\n\r\nconst MessageMemo = React.memo( Message );","export function getMessageList( chatId ) {\r\n    return ( state ) => state.messages.messageList[chatId].messages\r\n}\r\n\r\n","import styles from './Messages.module.scss'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport MessagesInputNewMessage from './MessagesInputNewMessage/MessagesInputNewMessage';\r\nimport MessageList from './MessageList/MessageList';\r\nimport { useEffect, useMemo, useRef } from 'react';\r\nimport { checkCorrectId } from '../../../redux/reducers/chatsReducer/selectorChats';\r\nimport { getOldMessagesWithSaga, updateLastMessagesWithSaga } from '../../../redux/actions';\r\n\r\nexport default function Messages() {\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch();\r\n    const checkId = useMemo( () => checkCorrectId( id ), [id] );\r\n    const isCorrectId = useSelector( checkId );\r\n    const boxMessage = useRef();\r\n    const windowInnerWidth = window.innerWidth;\r\n    useEffect( () => {\r\n        if ( isCorrectId ) {\r\n            dispatch( updateLastMessagesWithSaga( isCorrectId.chatId ) )\r\n        }\r\n    }, [isCorrectId, dispatch] )\r\n\r\n    const onScrollFunction = () => {\r\n        const scroll = Math.abs( boxMessage.current.getBoundingClientRect().top - boxMessage.current.offsetTop )\r\n        if ( scroll < 1 ) {\r\n            dispatch( getOldMessagesWithSaga( isCorrectId.chatId ) )\r\n        }\r\n    }\r\n    return ( <>\r\n        {isCorrectId ? <> \r\n            <div className={styles.box}>\r\n                <div className={styles.messagesTitle}>\r\n                    <div className={styles.messagesTitleName}>{isCorrectId.nameDialog}{isCorrectId.avatar && <img className={styles.avatar} src={isCorrectId.avatar} width='24' heigth='24' alt={'profile avatar'} />}</div>\r\n                    {windowInnerWidth < 1024 && <div><Link class={styles.box__back} to='/chats'>←</Link></div>}\r\n                </div>\r\n                <div onScroll={onScrollFunction} className={styles.messages}>\r\n                    <div ref={boxMessage} />\r\n                    <MessageList uid={isCorrectId.chatId} />\r\n                </div>\r\n                <div className={styles.input}>\r\n                    <MessagesInputNewMessage uid={isCorrectId.chatId} />\r\n                </div>\r\n            </div>\r\n\t\t\t\t\t\t</>\r\n            : <p className={styles.warning}>Откройте чат</p>\r\n        }\r\n    </>\r\n    )\r\n}\r\n","export function getChatsList() {\r\n    return ( state ) => state.chats.chatList;\r\n}\r\n\r\nexport function checkCorrectId( id ) {\r\n    return ( state ) => state.chats.chatList.find( el => el.linkToDialog === Number( id ) );\r\n}\r\nexport function getStatusFieldInput() {\r\n    return ( state ) => state.chats.toggleNewChat;\r\n}\r\n\r\nexport function getStatusErrorChats() {\r\n    return ( state ) => state.chats.error.isError;\r\n}\r\nexport function getErrorMessageChats() {\r\n    return ( state ) => state.chats.error.msg;\r\n}"],"names":["Chats","className","style","Dialogs","DialogsNewChat","Messages","DialogItem","id","name","avatar","styles","isActive","to","src","width","heigth","alt","dispatch","useDispatch","statusSubscribeOnNewChats","useSelector","state","chats","subscribeActived","prev","next","useEffect","setSubscribeOnNewChats","closedSubscribeOnNewChats","getDialogs","useCallback","getChatsList","list","map","el","DialogItemMemo","linkToDialog","nameDialog","chatId","React","InputNewChat","newNameChat","nameNewChat","isError","getStatusErrorChats","shallowEqual","errorMessage","getErrorMessageChats","type","placeholder","required","onChange","e","preventDefault","changeNameNewChat","target","value","label","onClick","addNewChat","toggleNewChatInput","getStatusInput","useMemo","getStatusFieldInput","MessagesInputNewMessage","uid","textMessage","messages","textNewMessage","autoFocus","inputChat","sendMessageWithSaga","document","getElementById","focus","forwardRef","props","ref","time","Date","TimestampServer","windowInnerWidth","window","innerWidth","current","scrollIntoView","behavior","author","message","getHours","getMinutes","MessageList","startDate","messageList","refOnLastElement","useRef","subscribeOnNewMessages","unsubscribeOnNewMessages","undefined","getDate","tmpDate","toLocaleString","month","idMessage","MessageMemo","Message","useParams","checkId","checkCorrectId","isCorrectId","boxMessage","updateLastMessagesWithSaga","class","onScroll","Math","abs","getBoundingClientRect","top","offsetTop","getOldMessagesWithSaga","chatList","find","Number","toggleNewChat","error","msg"],"sourceRoot":""}